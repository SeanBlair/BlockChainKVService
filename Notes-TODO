Hey Harlan! This is all my thoughts as I will not be able to work on A7 until Friday  :/
Good news is it seems to be in prettty good shape.

DONE? (need to test more)

-- Client failures
	Ignore, except if they can cause kvnode to crash. Silently fail??
	Tested, they do not seem to cause a problem... If a client issues a commit request and then fails, the commit succeeds. This is ok, per piazza @581

-- KVnode failures
	
	Clients should interpret RPC call failures as KVnode death. Probably mark and stop calling that node
	Maybe have a struct NodeIpPort + IsAlive that stores the nodeIp's (in order) and if the node is deemed alive.

	Kvnodes should conclude that broadcast -> AddBlock RPC failures as KVnode death. Probably mark and stop calling in a similar
	manner as clients would, (described above).


TODO:
(And ideas how to implement)

--- Inconsistent state at the kvnodes

- Inconsistent answers on NewTX and Commit received by KVService
	Most likely cause is race conditions. 

	Example: NodeA and NodeB, Client1 is close to NodeA, and far from NodeB; Client2 is close to both. 
	Client1 calls NewTX and Client2 immediately also calls NewTX. Since the calls to nodes happen in the same order, they will both first call NodeA and then call NodeB.
	Client1 gets TxID = 1 from NodeA, Client2 gets TxID = 2 from NodeA.
	Client1 is farther away from NodeB than Client2, so Client2 beats Client1 to NodeB even though Client1 issued the call to NewTX before Client2.
	Result, NodeB gives Client2 TxID = 1, and then gives Client1 TxID = 2.   
	
	Options:
	
	0) Since the kvnode does not keep a record of new transactions, (it simply returns the next id), if the nextTransactioID variable increases by say 10 each time, when a client receives inconsistent answers, it could choose one that is in between the min and max of its inconsistent answers. this would ensure that each client has a unique txid which is the only important part. 

	0.1) For inconsistent keyValueStores on NewTX, more complicated.... Might have to retry... Or choose majority answer...


	2) For Commit inconsistent answers, retry is not an option (the system already depends on any Commits that happened.) I would choose majority answer, on tie, return Abort to client. Abort is the safest, client can allways retry TX.


- Inconsistent blockChains between nodes

	Caused by node failures. A node fails before finishing broadcasting a new Block to all the other nodes. This is likely because broadcast is sequential, not concurrent like the calls clients make to the nodes. I tried making the calls to AddBlock from broadcast to be concurrent, but the system did not like it... This case might be already half supported, because it is similar to a fork. A node not receiving a Block is similar to that node choosing to build on another block and effectivily ignoring the other. Since this is a random choice, 0.5 of the cases pass.

	The problem is when a node receives a call to AddBlock with a Block that has a parent that the node does not have in its blockChain. (The parent hash is included with the Block and is needed for insertion into the blockChain).
	This case could be identified by the nodes at the receipt of an AddBlock call. If the parent of the Block that they just received, does not exist in their blockChain map, this means they do not have that Block. 
		Option here could be: 
			Always send both the new Block and the new Block's parent Block in the AddBlock RPC. This is for the case that the parent Block does not exist in the receiving node's blockChain, to allow the recieving node to place both of them in the blockChain and thus fixing the case of not having all the Blocks that other nodes have. This would be simpler than implementing a GetBlock RPC call between nodes.


	
Note: Client failures should not cause inconsistent state at the kvnodes, because the calls that clients make to nodes all happen concurrently (within 
	nanoseconds). The nodes will all get the calls even if the client dies before recieving answers. 



-- Verification that a committed block is on the longest branch.
	This is very difficult as far as I can tell, and seems to already be provided as a side-effect of the current design. So no need to check/support?? Need to test.


-- Fixing GetChildrenTest to return all the blockChain (instead of just the first child of each node (gets stuck on non-longest branch)). This could be adjusted to verify that a given Commit Block is on the longest branch.

